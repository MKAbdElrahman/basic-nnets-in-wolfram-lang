(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    442182,       8606]
NotebookOptionsPosition[    436278,       8492]
NotebookOutlinePosition[    436672,       8508]
CellTagsIndexPosition[    436629,       8505]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Author", ":", " ", 
    RowBox[{
    "Mohamed", " ", "Kamal", " ", "AbdElrahman", "\[IndentingNewLine]", 
     "Date", " ", "Apr", " ", "24"}]}], ",", " ", 
   RowBox[{
   "2022", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", "Regression", 
    " ", "with", " ", "Neural", " ", "Networks", " ", "in", " ", "Wolfram", 
    " ", "Langauge", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Goals", ":", "\[IndentingNewLine]", "\t", 
     RowBox[{"1", "-", " ", 
      RowBox[{"what", " ", "neural", " ", "newtworks", " ", 
       RowBox[{
       "are", " ", "?", "  ", "Layers", " ", "?", " ", "Functions", " ", "?", 
        " ", "Compositions", " ", "?", "\[IndentingNewLine]", " ", "2"}]}], 
      "-", " ", 
      RowBox[{
      "linear", " ", "regression", " ", "with", " ", "linear", " ", "layers", 
       "  ", "\[IndentingNewLine]", "  ", "3"}], "-", " ", 
      RowBox[{"why", " ", "we", " ", "need", " ", 
       RowBox[{"nonlinearity", " ", "?", "\[IndentingNewLine]", " ", "4"}]}], 
      "-", " ", 
      RowBox[{
      "why", " ", "we", " ", "need", " ", "to", "  ", "go", " ", "to", " ", 
       "higher", " ", 
       RowBox[{"dimensions", " ", "?"}]}]}]}]}]}], " ", "\[IndentingNewLine]",
   "*)"}]], "Input",
 CellChangeTimes->{{3.85981981334132*^9, 3.859820146168405*^9}, 
   3.859820896488851*^9},ExpressionUUID->"c38ce247-cc6a-4315-9c51-\
3a4fd0216df1"],

Cell[CellGroupData[{

Cell["Linear/Nonlinear Regression with Neural Nets ", "Section",
 CellChangeTimes->{{3.859812081254713*^9, 3.859812083972855*^9}, {
  3.859819690439567*^9, 
  3.859819753567499*^9}},ExpressionUUID->"207b3f9c-2043-4e42-a3b8-\
0773b50f0b23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.859812340334704*^9, 3.859812358859783*^9}},
 CellLabel->
  "In[359]:=",ExpressionUUID->"5c52ba08-27cd-43a5-aa6b-39b31c0e1a3d"],

Cell[BoxData["\<\"/home/mk/Desktop/DeepLearningWithMathematica/Linear \
Regression\"\>"], "Output",
 CellChangeTimes->{3.859812359487862*^9, 3.8598158876588993`*^9},
 CellLabel->
  "Out[359]=",ExpressionUUID->"89a186f4-48ac-4664-8c1c-85f06c3d23d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileNames", "[", "]"}]], "Input",
 CellChangeTimes->{{3.859812361930773*^9, 3.8598123723633537`*^9}},
 CellLabel->
  "In[360]:=",ExpressionUUID->"6c273393-19a6-41ce-af7a-133aeef56a96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"RegressionNN.nb\"\>", ",", "\<\"test.csv\"\>", 
   ",", "\<\"train.csv\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.859812372780739*^9, 3.859815889273494*^9},
 CellLabel->
  "Out[360]=",ExpressionUUID->"f35ffc71-855f-4472-916c-23391986b60e"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainSet", " ", "=", " ", 
   RowBox[{"Import", "[", "\"\<train.csv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSet", " ", "=", " ", 
   RowBox[{"Import", "[", "\"\<test.csv\>\"", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.859812374823102*^9, 3.8598124807750597`*^9}, {
  3.859815897013472*^9, 3.859815901574065*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"7008c68a-3566-46bb-8cfc-d11ce6c3eea9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainSet", ",", "testSet"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<trainSet\>\"", ",", "\"\<testSet\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.859812483712821*^9, 3.859812529406089*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"92ea4dcb-56cf-4abe-ab40-0929503101d5"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
         "]]}, {
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
PzOj5w==
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 10.}, {0, 21.972080803241298`}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"trainSet\"", "\"testSet\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.859812491186729*^9, 3.859812530387804*^9}, 
   3.859815905359335*^9},
 CellLabel->
  "Out[365]=",ExpressionUUID->"96b39ad7-0f27-4480-964e-4b34af5d98da"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Linear Regression", "Subsection",
 CellChangeTimes->{{3.8598126047220697`*^9, 
  3.8598126261130323`*^9}},ExpressionUUID->"fc29b5db-4428-47ce-b409-\
0de5bda03cb0"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["f", "TI"], 
        RowBox[{"(", 
          StyleBox["x", "TI"], ")"}], "\[LongEqual]", 
        StyleBox["w", "TI"], 
        StyleBox["x", "TI"], "+", 
        StyleBox["b", "TI"]}], TraditionalForm], "errors" -> {}, "input" -> 
    "f(x) =  w x + b", "state" -> "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"98a0327d-85de-43fa-af0b-bfe4a818047c"]], \
"Text",
 CellChangeTimes->{{3.859812634983068*^9, 
  3.859812648199708*^9}},ExpressionUUID->"0df6b626-fe8c-4951-8806-\
b2bc541cf530"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"LinearLayer", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8598126783101*^9, 3.859812720785996*^9}, {
  3.85981430910084*^9, 3.859814374099174*^9}, {3.8598144186217747`*^9, 
  3.859814454215399*^9}, {3.859814524493546*^9, 3.8598145267023373`*^9}},
 CellLabel->
  "In[371]:=",ExpressionUUID->"c77c0eda-c094-4034-9040-6c81e0fdacab"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"OutputDimensions\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"OutputDimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"OutputDimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"OutputDimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"OutputDimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Weights\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Biases\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Biases\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Biases"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Biases\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Biases"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Input Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Output Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.859812710903227*^9, 3.859812721012148*^9}, {
   3.859812774622485*^9, 3.85981277800495*^9}, 3.859812985539599*^9, {
   3.859814309925413*^9, 3.85981437459*^9}, {3.859814419845921*^9, 
   3.8598144547248898`*^9}, 3.8598145271496887`*^9, 3.859815918874256*^9, 
   3.859815961459676*^9},
 CellLabel->
  "Out[371]=",ExpressionUUID->"39ae3fb7-6fb6-430f-9068-877e15899d65"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.859815953728553*^9, 3.859816010463079*^9}},
 CellLabel->
  "In[396]:=",ExpressionUUID->"d03436ec-213f-4cd6-a3f2-76e5404668cd"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwl0H9Qk3UcB/DhBuI2bGN7kJ/bA5GDiShnGBju+0n0UkEPQ+JuJMH4mSIG
xzodYJNEBA5bRohwHAxSTz0gF3aHFS1EkQErHKnX6CJgmqCXhAMGGPF8v388
9zyvez7vz+fz/fqrjr2XsYrFYu1beZh3w0mVS1h6pWLls6nWu1jRY6FjE+mP
0IrhpEGJlu92fUbTJxjTOw2HUYOxSupMlzNmyQwalLNdfXROepFxiqehAlkW
s6tfSK/ivNBQh1Zbx2TPpZ2MtW6Ga0hvasybkvYxNvIMt1Bbe7k1J/R3xk2f
DPWjLDR08Vn+OO4Xfm0Y5dqCxzvanuJ89x4r4vqflv0Z8QLnS6L+QucE/XJ9
ygze707NBFJZD/7EHpjF9WMRf6O8O6dVx2QLeJ81pil042N+vOeeV3j/Ib9/
kL7wyOTmRBYw/To/mEYljUsHXj5zYtxk5a30tYzCDxo2Y1aJ4SVaX5B5/KDc
GdujeBZN2C+8z/vRhbF2IWge7bUdLj6f58oYBuYdaP+EboNEwmU8GmBcRJO3
Vdp7rTycN2W/QqHCB37RH7rhfHL4MuIie+rIzFq8jz6PBe8+V84FJAhwfaXS
CR51pzspQ4R4v61oFdw825NM27FTKsRsyHRWj5rN7nje8CIb0vILb/LrRLhf
r4UDm7I2mGNTxdhFV5zhF/cQnjqSwv2Cqlzg+7aS+hC2B84Xpa2GQid53MAf
HiQf4wrcEc3u3I512MOb1oDtsn91Y5Enmc/hQnWQF6czwQt76xQXdHWZvam0
N66v6OaBsvqQmf8EW6v/ig/zOy85Grt8GNPtGjcYt+043l3mi+vT49ZC8/Yw
n8FUP3yfwojXoLVULczaKMH3scVVAGUJaTFsO3aKIl8A4SP6q2WDUly/yyaA
2uD61sEYGrspTgifGqtqYzqxjbM9Qtjnk3DJFOiP/4e+5Q7v5PYmCcuxRzv1
7tDoqwocsBMDJYLA21dq9icF4Pm+p0Sg29gtv9+FDY8mRZA5wxnqk7+Oz6M7
JAbVjX/p8s+xR+vviSGnJH5p7xfEJ0xiUMd3POR/SZw4IIazdvU5XQ22UfSr
GNoiHYsXGogrH4rB8fPyg8vXsZsKH4tBd59f1dOLDUkcCupajmaf6SOOdKGg
pcAcvbufeJ0rBd956Bb6zcQWHgUjSlG25Teyb4yIAtm4V/TYODbr7QAKNndo
JF/biL0CKdhWanVkPCGee4OCWFnDN08nib8NpiD/CC2ZnibnkYdRUBR1ymGY
IXbdQkGp29hwgZ348ZsU1La3VM7Pk/M1R1DQrOVk3Vog1m6j4PqBjB1FS8TJ
URR0BNz1U/xHHKWgoGtmvWN5mdgbKPgfh+WpNg==
        "]]},
      Annotation[#, "Charting`Private`Tag$96845#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8598159559577217`*^9, 3.859816011055964*^9}, 
   3.8598164532059183`*^9},
 CellLabel->
  "Out[396]=",ExpressionUUID->"d4235d5c-21c8-4487-bd21-ae187f97b6e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedf", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"f", ",", 
    RowBox[{
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"TimeGoal", "\[Rule]", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8598162497079287`*^9, 3.859816323219873*^9}, {
   3.859816360282116*^9, 3.859816373605481*^9}, {3.85981643359168*^9, 
   3.859816434845779*^9}, 3.859820313140287*^9},
 CellLabel->
  "In[394]:=",ExpressionUUID->"68e374fe-ee50-48ff-8f4f-dd35d198f5ce"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"OutputDimensions\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"OutputDimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"OutputDimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"OutputDimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"OutputDimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Weights\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Biases\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Biases\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Biases"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Biases\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Biases"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Input Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Output Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.859816264210635*^9, {3.85981631505753*^9, 3.859816338482479*^9}, 
   3.8598163840038433`*^9, 3.859816445654541*^9},
 CellLabel->
  "Out[394]=",ExpressionUUID->"a991112e-cb12-4707-aad2-a7e6e6813ce0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"trainedf", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.859816355112526*^9, 3.859816364877062*^9}},
 CellLabel->
  "In[395]:=",ExpressionUUID->"161fca30-317b-4c99-afcd-7bf297637455"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwl0X1ME3cYB/AywE1aCC+KINBea6VQSim/hGQuAx7AxBfQiMjIcJtQhTJF
HIQ6BkwrLwNiwKpEEEYAARck1OmqGXthFZHX0g1w6kbNGrBDmWaw2kELg3HP
/XG5++R5ue/9ji8/dTDjDRaLtW/9ou9NZ+Qbwo+dj1p/1Dk8Z0P/JJWQQn0c
ve6W9gU2rA30llLUZ7RVu5bZ0KSr5jlTVbSpajcOZEcqTy7yrtJO84ngwORy
Vu08r5M2K6yEA29OTYte8Xpowwf+rtA60pz7F2+Ytu7uATfQ3Kyaypb+ju44
7Q6K6PGrL/NmcH5Y4wE55uAZreYFbZPe5Aku/DLRH2/PYx6dZBPUuI+KW9Ms
2F8t3wzyqUM/Oer/xfqe296Q+6BMfkpkR/+5vAVufcJJ8tnzH5MnzBdai07M
yVJYQM/3FW+FkuaVxNcvHWirWFo/YE2a4IdCR9otPLM/BOZnFhwSO9PWSWVc
eGate4/94wbs987gwV7z8c8v5b5Fm1p8n4L9z9QhXK4LbUhapWDuvlw11M3G
+cY6Pkg9HgXEHXHFujFSAC7R1nSjxQ298TcB7HqVuihIdsd90nPb4EnfMYdU
iQfW4wKFcKey/yPKijbt1Akh01lpMhg8aadFKbbD0byiO5wGL7TQMRDCFCGG
hPRNmNfeGAg/e0rYyh2b8fuGYkTwvaakUeLojftLjSIochAf0D9FmyLKgsDF
WLg7R7sF+58EBYP5Or+2udgH64q+YKgN8nXqSfbF8/w7SwzqhszBdGor9sud
QiC19kMDZxatGvgyBJZ2dtiae/0wnyBWAjPm2IK+Cn/sP26UwLXIcL+x9AA8
rxulodBdrvRQhHKx/zFPChXJR+MdrWh4/a0UIoytnRVjPHz/xiNhUB/c2D0W
T2HdxR4GZ3XV9fE9aJNDogz2+SV3jAj5mOd0mwxicgYPe1QxTp+XQbO/XKi3
otOG4sJBeP+rK/sPCzBfx8VwUIf2iSd60Tr703DItDiND4u34f/SywjIb/1D
VV1Aq7zOEMguSVrZexHdkn2WgDJJ+5hzGa17oCJQaVXWqK8w/rSUgGaHbbmu
idlnrCRgu7f26HoXM99+mYB6glPdP8g4opNAQ9vJrC+GmfmaGwTa8g1xu0cZ
z3YRuOutto8a0KwGDQFjqlfW5K/M/tVvCIhmfOOmZ5j+gV4CMm0ht93MmKcj
8E75lC1jFm0quEcgQdT09Ys5Zl9IP4G8ExR3YQENF4YJFL97znbbgk57PkKg
3HX6Yb6VOY8YPYH6m23nl5YYWwwErqmcFN/Zme9J+IVAV2JGbPEK445xAlrB
QEDUKpNndYJAryXQtrbG5El5SOB/Ae2sAw==
        "]]},
      Annotation[#, "Charting`Private`Tag$96733#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.859816365426087*^9, 3.859816387918008*^9}, 
   3.859816448626644*^9},
 CellLabel->
  "Out[395]=",ExpressionUUID->"1f486a2d-4f38-4550-aad7-5621a75d657a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"trainedNet", ",", 
   RowBox[{
    RowBox[{"testSet", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
    RowBox[{"testSet", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", "\"\<MeanSquare\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.859816606456491*^9, 3.859816654159504*^9}, {
  3.859816724270235*^9, 3.859816726825716*^9}},
 CellLabel->
  "In[400]:=",ExpressionUUID->"0a363f40-f242-4f8d-bcce-6fd91d721f7a"],

Cell[BoxData["3.20440796482566`"], "Output",
 CellChangeTimes->{{3.8598166322165823`*^9, 3.859816655053087*^9}, 
   3.859816727412554*^9},
 CellLabel->
  "Out[400]=",ExpressionUUID->"3f070ce5-1eff-4a54-8b6d-9943a80b32cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding more Linear Layers", "Section",
 CellChangeTimes->{{3.859820232529241*^9, 
  3.859820245314929*^9}},ExpressionUUID->"0a7a2423-5263-43b1-8631-\
025340deec6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f11", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8598202609378347`*^9, 3.859820280311187*^9}},
 CellLabel->
  "In[472]:=",ExpressionUUID->"663594e8-bad4-410a-a409-c8195c50a9b2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {96., {27.673828125, 32.326171875}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8598202813450403`*^9},
 CellLabel->
  "Out[472]=",ExpressionUUID->"2de44270-9777-4805-8ba8-517ce1897c5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedf11", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"f11", ",", 
    RowBox[{
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"TimeGoal", "\[Rule]", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859820331012609*^9, 3.859820333937541*^9}},
 CellLabel->
  "In[473]:=",ExpressionUUID->"cc1414c7-7fee-460a-acbc-19c486089b56"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.859820344628154*^9},
 CellLabel->
  "Out[473]=",ExpressionUUID->"c0c9e34a-bdfd-4f7c-8b07-d6d3706288cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"trainedf11", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.859820352420632*^9, 3.859820352609721*^9}},
 CellLabel->
  "In[474]:=",ExpressionUUID->"a3c6263a-b733-49e4-bd55-588f9a3dd3fa"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwl0HtMU3cUB/AyQBcelcJ4CbS30FEpBdpfsmy6KUcxkQkaGHYmELRUoaiA
wuhUYFsHMmgQrJMoRWspDAwhgBhcwjaxPBQRKNH6WAZkDZU5mSy6roMiG+Oe
+8fNvZ+c8/2d37l8xfFPst9isVh71h76rf9SsU56uGbb2icrRs6GYQuVvJ86
Er9GqD7ChtW7/RUUdRptK2KD3lTLc6c0aF0lG/K2qvIXeTraavcONlje5Na/
4rXTNs042LB+ala4wOvD/rqaDWC8byj8gzeK9ZMZPtDVrZnKi/2FdtP6Jg4o
4x/oXhbZ8Dz/SV8omIuy9Xa9oC2XLvmBB/+M8NcPXtFmlW3xhzqfMZFRbsf6
TmUAKKb23XYd/wfzH3YGQuGdM4rjwmXaVlgIgp4TXmlBH/+L+eHAjWAsPTYv
2c8C+j6qjBAoN6yk/v3ShXZTqyYUWBYr/FTiirb1hEFkcc6pfSJ32lSKnQvP
HJc+9by1jrZcv4GC3XNHv/i28G3a1qgbFOx9po3mcj1oq2+l8mF+SKG+1+mJ
ee1vfIjlPAlLOOhNm7VcFQ4e8Y6saTsb883cCNi1kL4YLvPBum0gAn4ePOyS
LubQBpFCADerhw9QDrT6+qIActxVVrPZF/vNunfhUFHpTa9GP6yLpJEQp4w2
J2e9g/W6O5Ew6Sv2VG32x3nVOUL4sav8stg1AP/H4IoQSl1EKeMzaOsFwybw
mC5JLOgNxHxefBTMtfHrDWVBuH/Foyio3xTs1icLxrz0cxFoG3NGsqiNeF+e
dzSk12eavZ6jTX7GaFja2eo09Ifg/zVsF4NtbsepwapQ9NGnYmjeKg2ZyArD
/vHTMdBZqeIoY7jofE4sVMkOJbk60Fb/tlh4b9rYXjXBw3myXXHQEHW5cyKJ
wrplJg6+MtU2JPUxLgYJ7AmRtd4X8LG/QiuB7QUjGRwNY+mUBAyhCsG4A20S
iaUgGLp2cW9GOOaHTkpBGzMoetiPllsHpJBjd3swKorA/kRfAoqevyjNOTSk
ZBLIK09b2X2eseEAAVVa71OvC4z/PEig2qGq015Ey88qCHRtdr65pEer7ykJ
OAdWn7R1oK1QRED70Kt2eARNSasINLbk534zylhdTaCl2JyQOIZmTWoIfB+g
XR4zM/PyzxKYTvfLtTxm3H6egNAWnDBrY+bzrxCQ9JZwv5tjfEJPYEvllDP7
Obrp9lUCyUL99RfzzL6ZRgJFxyju69eMdW0Eyj762nnDzvj3awQqvWcfFTsY
v99OoKG7pWZpiTnvcQeBZrWb8odlZj9BJ4GO1OwdZStM/2ddBHrD74Zt+4/x
YDeBfnukc3WV2c+3h8D/90SoWA==
        "]]},
      Annotation[#, "Charting`Private`Tag$184332#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.859820353249298*^9},
 CellLabel->
  "Out[474]=",ExpressionUUID->"f04943dc-b84b-4077-a005-d23caeafbd7d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding a Nonlinearity", "Section",
 CellChangeTimes->{{3.859816831042396*^9, 
  3.859816835950091*^9}},ExpressionUUID->"befacb98-605f-498f-afd5-\
373a414ee46c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f2", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "LogisticSigmoid", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816856065752*^9, 3.859816955561952*^9}, {
   3.859817033558771*^9, 3.859817096056344*^9}, {3.859817379123831*^9, 
   3.85981744204676*^9}, {3.859817615095641*^9, 3.859817661931469*^9}, 
   3.859817835430941*^9},
 CellLabel->
  "In[432]:=",ExpressionUUID->"f8c89adb-0cf2-455b-9ab6-4f466c167740"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.859816927769506*^9, 3.859816955936224*^9}, 
   3.859817096883647*^9, 3.859817381299314*^9, 3.859817411996883*^9, 
   3.8598174422917213`*^9, {3.859817617776932*^9, 3.8598176623283577`*^9}, 
   3.8598178358259773`*^9},
 CellLabel->
  "Out[432]=",ExpressionUUID->"2d2e31cb-a360-4008-a1de-2f5512f316ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedf2", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"f2", ",", 
    RowBox[{
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"TimeGoal", "\[Rule]", "40"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816967399662*^9, 3.859816969833873*^9}, {
  3.859817132583552*^9, 3.8598171332644043`*^9}, {3.859817196309761*^9, 
  3.859817197426291*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"bebcc049-4548-49e8-9dcc-7b053c4b0fff"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.859816980524214*^9, 3.859817109244645*^9, 3.8598171538947477`*^9, 
   3.859817238116612*^9, {3.8598174007637777`*^9, 3.859817424284265*^9}, 
   3.859817484190926*^9, 3.859817725858823*^9},
 CellLabel->
  "Out[429]=",ExpressionUUID->"3398be37-1bc5-4e8c-b72e-a9ba2a79b2c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"trainedf2", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{3.8598169953522787`*^9},
 CellLabel->
  "In[430]:=",ExpressionUUID->"9b54222f-5b15-4fab-834c-2dc0955c1c26"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwlzn9Qk3UcB/DxyzwYJj9iG2PbM1hMxq89z12aXcInqYsATUKyg37A5McK
xCB2Z4C1UET0sFWoiHEwCZM8ILxp0Q8iJHAC85BCz61cjMUx5A5bA4YIPc/n
+eO57/O6z+f9+XykqoOv5XtyOJxd9Me8zR+pNpB5JxPoXyLcwYPBCSJtH/Fu
Im2rnfb6UN8RgvgQ3THHg+b+eokPUce4n5rnQfEOzYElyTnG2uQFHkw8Ujcs
SDoY5xxZ5MET5in5vKQX+7d58UF/s6V0TmJE60V86OquMxfH3cP5N7L5UJg4
fu5BmY0x8eaXfCixR9kMXbM4Xz3FB1/pUfn9ZxcYwzdbBXBq84hCn+PEurFe
ACrz3l+8Rhdx/p5FAZT+dlR1UL6CDlaHQs/73Az+K49x35olFPSVRQ7lPg7Q
5hxWC6G6ZTX9vwcejLW1S0LgTFjhpwovxv2ndWEQWV5waK/CB+szL4lg2nX2
db+fN2CdWhNBiv29w5+XbmSck3hHDLunddFisS9j67E+CTiuq7Q3Ov2wvyqD
gLiASVHSO/7Yf/8eAb6JrlyLcxPOD1RJ4eX5rKXwzM14X9SaFO4O5HlkxQRg
fq41HK4eH3ybcLF2QgQU+GisJlMg41bbYgTsL6u8ym0KwnmbLskgvjDalJYb
jPv+yn4abgXG+Gm2P4X5SVkk/NhVfT7GKwTz/0xHQqWHYs/on2jOd9/LwddS
kVxi4GF+5cQWsF+UNrRU8dF/vxoFDVsE3r2ZAtx3V6YAXVPBcC4RivPHZxWQ
1fCWiTvDeuOlaFh+sd3d0idEr5bGgM2+89BAbRjmlVGxcGEHKRzLFbH3z8ZC
Z40moDBWjP3Bp+OgNnN/qpcLrS3aGg/PWPQdtWMSvPeaJR4ao853jqUS6J5t
Svi4v74xtRdtza9Wwi5hZvtNmZS9f0gJL5QMZwfUoYlSTxJawlSyURdam5dA
guz612d2Z4djnigjQRc7oLjdhyZ89CQUOL3HjYoIvG/kFgmqnn+Juk/ROcYl
EoqrM1ZTPkND+TIJmgzDHe4XaKvYTcJxl+aU7gxb/2CFhK7t7kdnm9GE4DEJ
7l/XJy9eZv2GJwW629z6wWF0azuXgqa2A+pjRjaf7E9BW7kpKXmErTtoXwvR
rYyY2H1xT1JgyQpST/zBzjMEUCC3CZKmbOz9V0IoUBoqxF/Z0dp0HgXP1Zjd
+TNozgLtNHnzt7MOdl+MgIKyIkL88CG7Ty+koOr5T9xXnGw+IYyCGv+p38td
bN5Mu7G77eTyMpsPElNwQetd+MMKW++mfTk9f2fVKptPkVBgCB8SJayx99tp
9zkj3evrrLUEBf8DXeuqHQ==
        "]]},
      Annotation[#, "Charting`Private`Tag$113020#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8598169926715813`*^9, 3.859816995999206*^9}, 
   3.8598171136016483`*^9, 3.859817156164751*^9, 3.859817241432835*^9, 
   3.859817426293501*^9, 3.85981749184562*^9, 3.859817730800866*^9},
 CellLabel->
  "Out[430]=",ExpressionUUID->"75f4bc57-c764-4b88-b108-09be87075a7f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding  More Nonlinearity", "Section",
 CellChangeTimes->{{3.859816831042396*^9, 3.859816835950091*^9}, {
  3.8598177958647346`*^9, 
  3.859817797930756*^9}},ExpressionUUID->"322d21d3-b9fa-4a8e-a39c-\
e6d65cbcb382"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f3", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "Tanh", ",", 
       RowBox[{"{", "}"}], ",", "Tanh", ",", 
       RowBox[{"{", "}"}], ",", "Tanh", ",", 
       RowBox[{"{", "}"}], ",", "Tanh", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816856065752*^9, 3.859816955561952*^9}, {
  3.859817033558771*^9, 3.859817096056344*^9}, {3.859817379123831*^9, 
  3.85981744204676*^9}, {3.859817615095641*^9, 3.859817661931469*^9}, {
  3.859817805731554*^9, 3.859817853308599*^9}, {3.859817928645733*^9, 
  3.8598179674789963`*^9}, {3.859818027013217*^9, 3.859818045889222*^9}, {
  3.85981811833397*^9, 3.859818130068202*^9}, {3.859818179433672*^9, 
  3.859818181988542*^9}, {3.859818251588296*^9, 3.859818254888199*^9}},
 CellLabel->
  "In[454]:=",ExpressionUUID->"6fd20ec6-8099-4d86-8531-46a2e35dc69a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.859816927769506*^9, 3.859816955936224*^9}, 
   3.859817096883647*^9, 3.859817381299314*^9, 3.859817411996883*^9, 
   3.8598174422917213`*^9, {3.859817617776932*^9, 3.8598176623283577`*^9}, {
   3.859817829166236*^9, 3.8598178556284733`*^9}, 3.859817934991542*^9, 
   3.8598179679922113`*^9, {3.859818046425819*^9, 3.8598180537130203`*^9}, 
   3.859818130527754*^9, 3.8598181824151382`*^9, {3.8598182554665737`*^9, 
   3.8598182654924793`*^9}},
 CellLabel->
  "Out[454]=",ExpressionUUID->"2f064cd7-465a-4c62-a02e-34dd406d0404"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedf3", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"f3", ",", 
    RowBox[{
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"TimeGoal", "\[Rule]", "40"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816967399662*^9, 3.859816969833873*^9}, {
   3.859817132583552*^9, 3.8598171332644043`*^9}, {3.859817196309761*^9, 
   3.859817197426291*^9}, {3.859817857894987*^9, 3.859817866176016*^9}, {
   3.859817937076333*^9, 3.859817938441317*^9}, {3.8598179702950363`*^9, 
   3.859817970949099*^9}, 3.859818268272502*^9, 
   3.859818371774479*^9},ExpressionUUID->"447dc72f-f350-428c-bcb3-\
0cbadd0ebc8c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.859816980524214*^9, 3.859817109244645*^9, 3.8598171538947477`*^9, 
   3.859817238116612*^9, {3.8598174007637777`*^9, 3.859817424284265*^9}, 
   3.859817484190926*^9, 3.859817725858823*^9, 3.8598178644444036`*^9, 
   3.859817907063892*^9, 3.859817948781831*^9, 3.859818011332657*^9, 
   3.859818095486093*^9, 3.859818172190879*^9, 3.8598182239823112`*^9, 
   3.859818370455168*^9},
 CellLabel->
  "Out[455]=",ExpressionUUID->"591725b3-ebb6-4e2b-9686-d5cd5111d436"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"trainedf3", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.8598169953522787`*^9, {3.859817913743136*^9, 3.8598179141166143`*^9}},
 CellLabel->
  "In[456]:=",ExpressionUUID->"8e1fdc55-71d4-44f2-9300-d667a8c02fa2"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwl0H1Qk3UcAPARYDlGio7XwfZsEIMxEPhdnXYg36BEebsMkGseBkNeSkAh
diCQLYIAaTqVEwTXBgRFHijd8JwWERLE2zqhzAu8OOaOIO0wWjAgief7/PHc
83zu+/4I5SffynyOxWLFbz30W3NGvi3keN3+rU94w8yFwSkqLoV6N2LLszXz
XNgc6vuYok7TVo4scEHTrxLYU7W0dTF/cSE3XJG3IrhCm0pa4cLUek79kqCT
NqtouzM8Pz0nfiIw0IY/Ap2hZVRb8KdgBPt1FjtD9/Xa6dyg32j3n+W5QHbE
vSuPC01otcEF8s3+Jn33AtanvO0KbGGl+Pe9S1h/gOMG53aOSVrSltE3brmB
fDrpO9vxf7Fee9odCn6olJ8Ur+F+2eEe0HOKk+h26D+MP7R6QEvZicXgFBbQ
HhvnQYV24/A/j21ow/ZGT2BNzcI3pba0qdRML/AtyipJktjTZlGxfHhkaTji
8O02dJifAGLM731wseAFzO/ZQUHCI3UAn8+mPTv7KQWLd+XKH7scaCvF9kII
crrvFfWOI+ZX1gmBHWFJn1l+kXbalxwRRD+RrYiSd2L85lURPBg4biOTOuE8
WZA39NYMHqMsaLC/7Q1Z9opZo3EXxj9L9oGMwrJeTtNunD+x6AN7sgOMcelc
nH9L+RL8tEvqoNjnjPmnxL5wp7uiWWrrQltnHPKFMhvJm+MP0cqGYjGwZ0oP
5utdMS719wNzh7BeW+6G8dhJP6j3c7czJLvj/zym8gd1U9ZwOuWB9xyKkICs
PtXImUfrri5JYPX1dqu2j4f3ueoDwGSOLBmo9sR73POk0BoewptI98J+YXsD
oatK4ZQdyMd9d6wGQnVyRqytBQ3jvUHw8kxLZ/WEAPNFVXug0b+5ayKWwvwH
3sHwYb+qMdaApppVwRDPS24f9RFivcoSDK/lDx91qkVTGUdCQOsp9xm3oFnP
+kLA5+4XlxOOitBsKhTUgQOSyT40pJ0Jhaxlu3sjEm/83xdMoSDv+ZuqPY+G
r4BAbkXiRswFNCs6koAiUf8r5xJaaYoiUGNRnFNfRvfzogl077OuN2jQurPx
BKzfb97vuMbUZ8gIqCc5qsFhJn/9fQJNbXk5n4ww/eoVBNqKjFEHxxhLiwnc
dFGvjRmZfVJLCczIdudM/cLE7ygJiE3uUXMmpn+RikCwvpT/uZnpzz5P4NWq
aWvmPHOfTk0gTqy5sbDI5E9cIlB4guI/fcrs691EoDzsI+vXy2jK0EygynHu
5yILOi1BQ6Dxelvd6iozv0RHoFVpl317jdnPsZXAtcOZkeUbzPyWNgJ60ZDX
/mdM/JV2An3LvtbNTSY+2kHgfxjonq4=
        "]]},
      Annotation[#, "Charting`Private`Tag$134067#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8598169926715813`*^9, 3.859816995999206*^9}, 
   3.8598171136016483`*^9, 3.859817156164751*^9, 3.859817241432835*^9, 
   3.859817426293501*^9, 3.85981749184562*^9, 3.859817730800866*^9, 
   3.859817914781095*^9, 3.8598179518007402`*^9, 3.859818014039393*^9, 
   3.859818098563943*^9, 3.859818174210085*^9, 3.8598182282819033`*^9, 
   3.85981837340204*^9},
 CellLabel->
  "Out[456]=",ExpressionUUID->"77c9af01-ab1b-46b9-9f54-99147a6a95e7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Going to Higher Dimensions", "Section",
 CellChangeTimes->{{3.859816831042396*^9, 3.859816835950091*^9}, {
   3.8598177958647346`*^9, 3.859817797930756*^9}, {3.8598184150886087`*^9, 
   3.859818429226975*^9}, 
   3.859818544625827*^9},ExpressionUUID->"97fb96a7-1d4c-4bd5-b313-\
bdacd0ba5bfd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f4", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "10", "}"}], ",", "Tanh", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816856065752*^9, 3.859816955561952*^9}, {
  3.859817033558771*^9, 3.859817096056344*^9}, {3.859817379123831*^9, 
  3.85981744204676*^9}, {3.859817615095641*^9, 3.859817661931469*^9}, {
  3.859817805731554*^9, 3.859817853308599*^9}, {3.859817928645733*^9, 
  3.8598179674789963`*^9}, {3.859818027013217*^9, 3.859818045889222*^9}, {
  3.85981811833397*^9, 3.859818130068202*^9}, {3.859818179433672*^9, 
  3.859818181988542*^9}, {3.859818251588296*^9, 3.859818254888199*^9}, {
  3.8598184369543133`*^9, 3.859818464710823*^9}, {3.859819370606094*^9, 
  3.859819373165332*^9}, {3.85981949079062*^9, 3.8598194929232264`*^9}},
 CellLabel->
  "In[469]:=",ExpressionUUID->"9578c88b-f49c-41c4-8ba1-cee6dfa2fe60"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.859816927769506*^9, 3.859816955936224*^9}, 
   3.859817096883647*^9, 3.859817381299314*^9, 3.859817411996883*^9, 
   3.8598174422917213`*^9, {3.859817617776932*^9, 3.8598176623283577`*^9}, {
   3.859817829166236*^9, 3.8598178556284733`*^9}, 3.859817934991542*^9, 
   3.8598179679922113`*^9, {3.859818046425819*^9, 3.8598180537130203`*^9}, 
   3.859818130527754*^9, 3.8598181824151382`*^9, {3.8598182554665737`*^9, 
   3.8598182654924793`*^9}, {3.859818456806176*^9, 3.85981846500737*^9}, 
   3.859819373569335*^9, 3.8598194933924713`*^9},
 CellLabel->
  "Out[469]=",ExpressionUUID->"87fefd60-c8e5-456a-bdda-00c2f6ff7813"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedf4", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"f4", ",", 
    RowBox[{
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "->", 
     RowBox[{"trainSet", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"TimeGoal", "\[Rule]", "40"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859816967399662*^9, 3.859816969833873*^9}, {
   3.859817132583552*^9, 3.8598171332644043`*^9}, {3.859817196309761*^9, 
   3.859817197426291*^9}, {3.859817857894987*^9, 3.859817866176016*^9}, {
   3.859817937076333*^9, 3.859817938441317*^9}, {3.8598179702950363`*^9, 
   3.859817970949099*^9}, 3.859818268272502*^9, 3.859818371774479*^9, {
   3.8598184787156363`*^9, 3.8598184811685047`*^9}},
 CellLabel->
  "In[470]:=",ExpressionUUID->"6bdcd9d0-5ada-4235-97a0-baa766a7fb39"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.859816980524214*^9, 3.859817109244645*^9, 3.8598171538947477`*^9, 
   3.859817238116612*^9, {3.8598174007637777`*^9, 3.859817424284265*^9}, 
   3.859817484190926*^9, 3.859817725858823*^9, 3.8598178644444036`*^9, 
   3.859817907063892*^9, 3.859817948781831*^9, 3.859818011332657*^9, 
   3.859818095486093*^9, 3.859818172190879*^9, 3.8598182239823112`*^9, 
   3.859818370455168*^9, 3.859818522624511*^9, 3.8598193910833273`*^9, 
   3.859819535139732*^9},
 CellLabel->
  "Out[470]=",ExpressionUUID->"37617c22-699e-4f96-b85a-58ae323ad3b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "trainSet", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"trainedf4", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.8598169953522787`*^9, {3.859817913743136*^9, 3.8598179141166143`*^9}, {
   3.859818529940494*^9, 3.859818530584996*^9}, {3.859820540112073*^9, 
   3.859820545151289*^9}},
 CellLabel->
  "In[476]:=",ExpressionUUID->"a30bd1d6-657a-4288-9842-10ea6b814fcc"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw92Xdczf37B/C0d+d0RmfP9l4qGe/Llqxst6SFzKIQyQ5lkxVKiYxkfitC
qcyIRDIzQkiDlpbfue+u969/7keqz/l83s/367qu9+eWB4ePn6Wupqb2TUNN
7d//0q8hYofy+TH6EMPOGv5h5UbS+n6Z5dpNDPw+kfAl6fINIaaQK4n74Zeb
TMbWNmnfXaOOP08ntwRbyp3qmJB06N+v0+RP0Njy40sE+PtZRDzlT6Z2IRtq
/f79l4vk88e2WWl9tfHvr5B5q9QDHdcYgf6L4xH99XPIdZ314SZGpni9q8T5
0XJ1mMIBG/+dhc3W18l3LzO9wUc08fo3yb5KvUcz3dtJuuqvXxwvIAu2LSov
1mLg590iGuvVcoc81Aa3/76KyCHvb92xxBQ/v5gIfq+Pb0/ThaJma9Un3CZR
OoP2XrTXw/u5S7RrjG2mXeXB+P8+8B5hu/W9zXdj4P3dJ78FVwxijAzgw8p/
L/iA7Ex9mre1zgjv9yHZp91vl8ZyLiz+9/YiHpHazbtKeIV0PUuJ85hWn81r
WdCj8YToVgwYXlbFh57neULOW6R/7GvBgxH/fUAZ0ftfCWP6ObqeZWR9lvfS
K++Y8O+n+e98SgpW19X4pLDxectJ5s7Y8tm2bPjvcV6Uk9VkcU0fXS4+/zOy
OR9yZq7WAem/tyN5TmR9B43Xb+Piejwnc05MW3BoAQPmzP73q4Jo3jw490iV
ENfnBQkuVntoas6Df6/GznpBJMniYmkfAa5XJQlx/p/A8S0PWv69XHMl8XLW
32uziYPr95L0mnDvU9FXFgz474KvyMgdh7tW3+Tier4iBevi/zAHcuG/24t7
TS7EXvj1aTcL1/cNuV6snnU5kQOPHv779YZcembJ1p1uhuv9ltRMfWlQa88A
zn83+I54VGzbNtnWBNf/HXm2vGyr5UUO/Hc5/yoyfuFrn++BIvR4T17GD1q+
4K0pPs97cup9TmCxrhn6vCcLAi62xq3l4vO9J23rXGxvLuKi1wdya2HN42Mx
fHzeD8RnnJf2nWVm6PeBHD6W2jcxlInP/5FEZ3iqr+0vRM+P5Miz2MsBg0S4
Hh/JvQML829d4aDvJ5LLTYzINhLi+nwiZ8ZPbfkp56P3J7JjVuv0q6k0P9VE
ZGCZtv0nG/2riVyz2RSihLh+1SRqYuP3c4mGuB8+Ex/3E7VPbOj+/Uwqn9la
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
L8y8N+bDHFa2tJ/m93OH/wPZcFzX
      "]]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJxF13lYTO37APBRJC2kUs1MalJqzkQ7WcJdhEiIEGkTRYkiKmHeRNoIbdZC
qCgkS0mmRPtCIYRIqWRr0a7f47m/1/X75/V+rnt7zuk5zzmj4brDdrMYi8V6
Sf7z79/zB1wlDN0i5pL/ZRXbS0FhDc96LW/rPEJh+FEpGH6Wd4jHC/hnEe++
FJwXRamP4oXReIGCNHjN8dveo376n+F9qTTUDHjE/FJPpXFvA1kY/e6zznf1
bOrKunFQJ3rk195CzWtiyUHa1YQn327n0PjSCXJg42vj1DY/958bXsyRg7gx
OXFf3R9Tl0XJgfy5YrHfrwv+OWkLMx4ulib6fFMvof1clstDV8JdwcdIaghw
lYeF7mWNL/qoG/b4yUO7eI9dTk0prZ90Vh5mzLGZFRZaTm3WJA/VNwfFdH5W
0X6HdyvAwdIpSwydaqiLDypCyu372tdjqZ2vHFeEFwkW4pPLqRu2JiqClvu6
XJWZtfR+peQpQql4iB5L4eU/s4YHFEFpzjv5qmevaL6q7wTIuBn2zkvvLZ1/
xVoJ2uTbIpe4ULNur1MCnT1L5vJjqHmpbkqQZCZ9sbEP8x2DlOBkSeSW9U/f
0X4NaUqwp/H470UO7+n9XDNSGRKlyw6Nt2yg6xWmKsPcOfschI5oszvKUO+t
O+3nXmre11xlUHkR0VyeRi2UrFaGEwnWVkflPtH7ebBbGQ5Nrhw7/I5atHSO
CrjPe3663beRrrdJpAKsS39y3kVQJ/kVq0DCSNX60mRqXk+VChSXbFFLfUUt
qvqgAvzVg5c2z/pC6+sGVKDFQ+fGhxFNtH6lMRuEZdYVFRxq55Gz2KCi5/sj
1xidCmxY3JlrcHYzNat8GRtS99veXVuC9nNnw7aT+/Oqo5tpv00JbBDrvvTx
cSq1s9UFNpxZW8y6WUDN00xmQ6mqwvyoLmrR7Zts0L2WUmS17iuNz3vGhvaH
NdUF6i20Xuc3G7ybmMasjFbqxLkcaHB8I5lfQi3aP58Dq+qO6lV8oW5YvpgD
M8q+BjRx2uj9rVrJAfHbV+SUQqmdzd04kBCkMXev0zc67+8RDkj9qd50KJDa
WTOCA/t3CMOOx1Kz5h7ngKvrx9prZWjbeA5MWXzes860nV5v31UO5CuwT8+U
+07nrynkgElUcZ6lLrWotogDVyX8v6xcSM2zKuNAZN8r/W1B1M6KLziw5mPM
szMt1MLpHznQlibXNSD6QfdDdg8HHLREbMl66qSkfg5Und8xT7GHmnVwiANZ
0ZXhU6b+pPka4lw4uCdSY+NpauchWS5IaYTofJzxC8+XSVwoNjuhf8CSWrhW
iwtH1l0wnWhL3RCqzQWx6AeLNnhSJ9UIuND/t9399XlqZxVjLnyrt0upEvtN
6zdZcCGt1/WW9zhqnsECLngo7nwgq4r+Y8mFL0vDi5dOo3beYcWF+py8liJ3
tPIKLpQn6DCicmrWIgcuhGeZGDq9oU7K3MiFxdXmM/82UYtUnLhQONrBymwY
+9e4cCF3T/TWB4YdtF7CnQuBJ8/7rJ1L3bDAgwszMtIC/izpwP2ylQtZTYVh
Jm7USQ2eXEhf3Zd6K46at2UnF7x2SmQuv4z9An24IIhUyPlxE+Nhvly4+mRq
6ZQSrI/fzYULRq5tKQOY7+/PBQebHR2LJDup3QK4wNkW1N+sSN2wJJALcRfj
pCbrUSeNCeLCMbkywUVnauGyg1zINp1418abGjSF5P457pg3uI/auZN4drrC
6rXx2C84mAtbajd/GHkF6y0OceHkwH2PzExq0SBxi5XDftlKjLsc5oKiT8bo
h++wv8wRLsxLYJ30aMX13CaOa06++mRkF61vD+XC/EPfqwJmU4N2OBe80+at
17FCpxCfeX7iS+0aaufJEVz4pT69T9+XOkkukguqi44een+wC/cr8SLvt7IR
Udi/hfhC7oFJzSnUwvQoLpQ0Vt84dQ/jkse40CWlaWpeSN3gRMwz8sv/8Rzn
ZxIvtS9aeu4jzhsm3iNkv7L6jvWLj3Ph0jVP555+rI8k7u0e52er1E3zJaO5
oDnRdXhYk5oFxDYLssLSDal5vsSBnhKKG+ZRi5KIr5xcd0FyGbVzKXF1dhr/
3nqs/0U82DCYuckD4+NPcEFHcvmc8XuoQY/YVv9iUd4h9CLiA2s6V3qdwPVs
IE7db1nPTsS4F3FtcvyWohtof2JWeeuv3TnUQiGxbufsfZOKcV4I8RrOsVHV
L6kb/jnYvOH4/kaM/8tP9zDi6P7+/351x0OS6/7+/7yR91/pHZH5Q/s7EOt/
4Gcbc6hhMfH6Ufvmf9L5g8878ZEpFRXHpv3B84z49ir1dWbzqVnd5H7UB/p8
bl1BLXpOLHnpiVe8I/ZPIzYumdCzwAv7HyR2/OX+X0cAdcMK4nDlHOmkUOyv
Rnx3rkzcsljMbyF/z4bNjryBS+gMYpmoW2kpt3C+D7Hru9WPxcsx/o3sD6mz
n7b7vMH1JxNnrvdW/dhMnWRPLP42NCBnRA+d95DsxxunFfn8cdTCLcSr7S++
ilWlFo0lTq7LMfYxpQY7sp+tExZ9/rCAOqmTPA9da2ujrW3Rx4gtX3//rrMd
+z0kz0/zS17Kh0s478dRch7Epq+xvoX5u4in280alfMI493keQytXeUaW0fN
+0WeV37NEVXrsb30evNDuLCtuj06OwBdR84T+eiAeTqhvbj/iHOWS/yIiaEW
/neAC9JV6kt33qQWqe8n11thO0qnidrZjJxXP0ofBMSs6KP9eneR8yHcki/m
SJ2kSTx3yYtXOzypG6zJ+Xi85Jvx0iPoBHKeGhSr/RiRi/ny27ng8zTEdYdO
P50Xu5kLal8WSvwxpna+4caFMrExaUHQj9eziQuTIep3mD3Gm8h5/yYnVpgc
QZ2k5MgF81tXL7z5iXHeGi6MP1v8dv6DATr/C3kf5WWHHygtpOY9mc8Fzzrr
SSufUyclkvfX0wnPtzq2UcNq4EJA9Jtef9VB2i9tNhc+HW5TyhCixxqR/b1T
ZpWK1RBd39OJ5P11RiEgfQ110jpV8vcs5CRauKHbOOT8ZzPfvA5SN4xR4UJI
vuWh/LsYN5Unz6v8wTvbJv2lfw8bCfK+vfNb4dHAX3xffefAxX2ebQZrWfBv
/QEPOBCcOLiyq33EPzuvXsYBVk0D5AaK/zNEfWJDSGvexcD/qIUFH9kwhnVe
bOZRjPe9Z4P8VPvCu7HUzu5v2TA59Pmim7fQ1jVsWDK7wOZSMzXL7CkbTl2+
7HDUdiTtV5lKvg9z/nu00J46iZfChnPVTmqjnKlFu6+y4eoQt+G/7dQ83mU2
PFgbs2nfUaw/co4N9dKHt3nnoeOOs0F79xb/1YJR/9zwcw8bps76uCrRgFp4
zI8NJqx1+m3TMa63mw0WkVbNB+dTJ+32YYNj8pTV1x2oRRO82BBX26Evdhyd
5cKG82c8pZfFon2c2ZDs/KU5/iw1y9CJDZntL89PTcH4XQc2VI7MlrbPp4Y3
a9kwatrBrzc7qZ2jbdggM9BT0N+HcV/yPSyfv/OCJUuCrmeNNRt4y1zt3slQ
N2gvYYPZZssnEtoY/2rJht2x0okb11Gzvs9hw74NIYEpjtTCfjM2BGsM2XW6
UYM0cXT6D5kwH2rRNPJ9fuPp88CscGrnW9PZ8KU7fo30I5xnbsCGS+bGu94/
wXm79NngFFV5/GYp5qfqseGt1qiSVXXYT2MqG56v8p19rhNtKWDDsUTZdd79
uL4zDBusv6XshhGjaX0Hnw3FwR/Tv4ylFt7WYUPebWveVAHG3SezIWjoq9mw
AbWoQYsNM60O2T83pWY5EWc1ZJ/0s8T6bZps8J1id3ORNTWvdxIb9P1/lbFX
UUM4cdo4nVF5zpifp8EGjw0FGtHuaGfiydc2znX1xnmjiT939K438UNn8diQ
NDdmr0QQ5m8hdgzXj6kLRqsRq74qvZUWhvPeqZP7o7GlIiga688Tx28f0WYT
T92wmXh19jkJjQtoY2L5UTM0O5OxfjRx9YqaeU+vUyc1qJH7ec7bIT4T8x8T
W7eMCdiajdd7hXiMyZXY2SKsjyZ+dhAyZYvwfv5HHFL2rvJjBdqf2EJ577fb
tbh+P+JhV3nJkHd4fwOIczPStdZ8xngwcWD/YnN+K67nJPGMhV829v/E60sh
7j5xMLD8D67nGXHme078hSGc10q8k7l3Z+dISbo+BXJ9en4rqy2kqZPmE38T
tbcrylOLAolTZI6O+aqC8QfEW9ZpamerU7OGiLWS8ywitKkbFpP7//mnvdPG
qdS8s8QbQ6MTRszG+Gry9+TU6N6tMad2ziWuUyt6fmUx9tMl+2P1vSGpJWuw
Xo3sJ3mx0zqqG7H+EnHVMpMFPzZhvj7Zf0uatu0/6YP9NpL9unC/5o0F/lg/
RGwxof7tnwMYT9ZmwyzLZTM2RGL9GLL/p78f5S57Cq/vGbGRX17s49N4fyLJ
8yK4ot+peQ3jerrkfJvTovEqHftJT2HDpJdJK45mYf4vYs4o+Yz2fJz/gjyf
0pu7PO7WUwt7jdggOXQj3r0R76+SCRtGxm5+xm5Dz5nGhsHCV5oHerDfFVPy
+1kr+8NC+TF03ntyfrTk+sj2qVA3mM8l58Vqgdl1dWrhzXnkPA45e3rcVGrW
VQs2lH/Zv7puEdaLW5HnPWj6oXAbal4mOc8KFX/eNrNDe5LzLneB87iLrljf
v5ycT8kWpVv3U8Nxcn6mmA30ckPQx+zJ+Vt7R6cyHNcTt4G8P0ZOPmyUgC4i
53GU22gYyMT8VA82hA8+9k7PxvUMbmPDkRj/804i9PrtbDhQ2Nr/pALXM8OX
Dd5a5XcjW3A9gUFssPkSraumJkX76Z4i16f7pdZBi1ooFseGpbtMD5wVUDt/
SWDDYrEP1SqmmF98gewHnu4ehRWYr3CdDdMcnookg6lZz8j7MeuyyrZFRzF/
RQnZD988FY4cQzeXk+clUH6L+Flq0fRaNvATnKT/3sG4eyM5f2r77DqbqJNU
R3LgDHfZsGE7rsdLkgPsTUkpOzuoeSUyHFDqWDjw/S91Q+oEDsjJxSS1KEtT
S/E5IG6t9+29FbVozXIOtD1xFRano8+lcED9RN22Y1nUYHyTA6sdbexWP8T6
d3c5kNc7U9BQTM3a9IQDJ6eOr+1pxLj1Rw7Mjn+so8ORof2SyPfNTrdp8t95
1CyXSeT3seH1wUwdtImAC3Llcc/nTsN8xVnk9yzLe9+aFdSQv54LkdtUqw4f
Qb9K5EK+6cnspVHUzrUpXPgzUjJ5fAy6+TYXnBM7/c9fpOYtLuSCSW3ppLu5
WD+yjQvv5wTs+dKB8z1nqoLe+FcT5zvJ0vlLW1ShOao5OHazLO6HTlU4L9Xz
9asndcPEv6ogM1IlM9KfOslMcSK0/bFf+OoExp3NJ8KV+vfeWwux3iJxIqim
ND0+zoyl6/Heqga1Wn+0Puuj7+xRg4iLEuEm09HSIWrQf0Zn9RsLaueuC2pQ
F7W1ZZIDtfDaSzU4teu73L1j6KiF6iA1r9ulvhPrezg88DfnS97rp4ZNmjxo
nr8h4/iIcTT/jS4PChbn91uMo05qNONBoG3UqVQBtcjLiQffNk9+useFmmV5
lQflkXb88VXo/2ZpwKLv63sm2cnR/o/3ToK6ArcR66eMp/1yR0yGX+ZvOfv1
qVn9UpNhdP5ykySj8bifFCfD9Mez3JtnUAsTtCdDzEO5Cl9Lat6UpZNheVZu
QoQjdYPbqcnw7IqiwaNorA9U14YPWuFWDaewfiRfG7ovD7uKx2M81EAbtC61
xVqdR/uba0PwBdHAy1S0+CZtmBvvVfSjAJ2RrA13jxY68rqpRd80dCBlSZlK
aC+uny3QgTMyL158H0CbGemAMPrjwodi8rTexUKH/J7r11sjh57qqgOfrxkM
R+hSi3ITdWBs0bnEHheM75Hnw4iwy/aOm6mFwOZD15I0hace6GF1PrypvB96
cgd6/VQ+JL96sWPqfmrW4UV8mNUsCZsSsN+NAD5sGeXXUFmJ+eYv+cBRL3k9
8Bzjc9/yoXLGxCr+S6w3/MiH6V5PHwW/w3hvCx8kaiacnd6C9eMG+XAl6Z7d
hREK1Jt4DKzLkVpWNpJalK/FgEyt44Le0WglhoHdo0cb246lZl02ZGCB91o5
CS7WL7Zg4Mvs3tLtJuhSFwYS7KwLzpiiozczYL0jKbtoFjUs28pA1qXFKRrm
2O/6TgZCxpw+/HIZxnsPMKD1eibMccf5DacZqPsVZbptG+YrnWcgUuqzXvx2
zLdIYqBrTvjE37swX3iVgcLkt/3JQsyPy2Rgk+++uzJncD1MCQPTjT7cZc5j
fUkZA1IdcG9hEtqlkoFbPhL3hVfRATUMDO488aArE+ut3zMQt+Paw/oy7H/0
JwNb9aVy+ypxfvpvBsx+euUqvUCXdzLQ6G30aEUduquHAQPvR3mFX9A/hhko
8arJvzGE82LGCuDclOkFJSxF2n+JnAB2ticUNItTC/vGC0DJy/EJTwq9YIIA
XD1bC2OUqEURXAFM07V+eptNDbITBSD5LeNppSrGj6oJ4Oa23c8kNTHupSGA
wa3DRUH62K9FWwBVjGvxaSOMz+AL4FJrYfG9abieYEYAVlvDS37NRotPEUCc
x4Qyt8WYn2cggK18/7L/lmK/D4YCMGt5W3bBBuf3Ggngs3tSed1qzFedJgB9
d91KaxeMq88UwIet6jvS3TCuM0sAkV4KcmM9cB5/tgBafQZWVnljf6U5Argc
VPZyZRA6BQRge/DxnsyDWL/fXACs4DvKCocwbm0hIN+XZ+1rw9B18wWgfNLz
/Zp47J+6UADPYpwO3D+D67FZJIDd8avUVS6gfxA/Pzfb5U0y1k+0EoAwUV9s
Vgr6BrHeJc3LZ67j/OlLBBBxTbppQybWz1gqgFlpw4dz76JvE7fc6NSemI31
k60FYJn5zuPDY6wfIu7Kqhoz7wnaZRn5e9x/kpb4DOsfEw/nXm93rkBvtxFA
xuPEqPxqzH9E7FBwSm9SLfYfvVwAUk9Dq4JfY741cXbRvp2NbzEeRexRumP8
gg94P0qIlSo2ZSZ/wvxh4sKqtatGNWG+4QoB7HqxtGtzC9qReNLLebHPvmF9
KHH1a+PpOj9xPWnEB97qvA7tQJcQT33P9W/pxvpG4vqP49hWff/b78Thn8Vz
UgfRUisFMKOpZ70UawKtVyb++vXbwDbxCbh/iOPaPp4rk6AWahIv+F4zZ4oU
xicRd/ws+hApS81SI77Y8fDgdzn0BOIV3Td5NopYP5r4b8/l/AxlrO8m67nR
H+86jov5DcQbhiLEd6ph/CmxFEuYXK2Bvkb8QGy3peFk7HeYeMsoj+YTfFy/
E/EESYfQDl3sN424UGoFf5U+1ksQ+8ouKLljhPW15P5XyU+R9puJcTfiudu3
t541w366xBlFGUUF8zD+g/z9jwUZhsgtxLgn8d9Xvq6mVhjXIt5umAWO1jj/
HdlP1s3Th67b4ry5xLng/+6FHfob2Y9TzmZn963DfrHE0ivM9ixy+t/9IPu5
NNv852dPtC3Z/7MUD1WM2YH5X8nzkeZdeN3AF+cHEIdpLvI44I/5cYsFsDjK
+hP7MDqDPI9PndfWrLiA+U7k+TV5mHB770VcTyl5vpMnvD1+IRnzjYlDSh2s
29Mwf3CeACxMXJ+G3sf83eS8EI3efj+vGt1rKgAD14zYphpc3zzipNyfu2Re
o0OmC+Cgj6/B+vfYX5KcV3Pf7U3tbsV4LznfHmYEn50irkTnHdAVgIS1HSde
Ah0rEMDKVp3TI6SohWnk/PyqWRH3So4aKnUEoHBa+aRQDfP/agrA89CNo7Uz
MS6tKgDuuld+QTsx3i8lgH0jBCvK32Pcv4m8v+oDF3tnKdP11cWR99veVNnj
96mFd2MZcJGve3EzB+OnYhh4sHjaxt8ijC8/ycCWuz99dlegy6MYyD/mdjaw
Gf02hCHfWDY/jqio0PlrdzGQXB905xoXvcCXgaq91/2L1ajByIcB7QxJcanJ
1KxxOxio4TxRjjLE/OptDOh1mZqfWoL5e1wZaLqqEZMYhLa3ZaA95FOfuJBa
aLWSgQ7Xi04eh7Df7BUMsNQ1dA3DMV/DhgFOPK+gIB7791sxsCJU/VdTJtY3
mTOQ6z7RekorOs2IgSeW729Ht2O/AvI9U6p5Xrn7J/qdAQOvP6o2PvqDHq9P
5q9VDVw+kk3nHdNlgL+Ym+KrTs2qIt9LMXz2yGw7dIAKAw6O2tca11ELK5TJ
90yM8ZKxDmhN4qzhZdGbXDG/dgIDta+CVcfuwPhCBQYUDrebbDqK3j2Wgbc5
fa+jInD+J1kGLv2S2PfgGMaXExs5aOTLxlKLDGQYsDVes+zBRcyXkGLg5KfH
m2UfoodHMbBeuUJyRh7OP0I8adnb6675GB9LnPmg6/f9IuynOZKBF8eZA661
GN8kxsCZp9M1ol7j/J4RDLgOzC+8/xYdRdyxxVFK9hPm57EYGD/3VNz97+hp
w3yo25U08/MvzH/9lw9Jqen1Ml3ofcQGE4onufbj/OIhPqxoH8yQGc3B+0u+
X1UmSdmaSlELGeKGtcrdLrIYrx/gw84nhrPvK1DDQuLoM1uKXHiYb9jPh717
gncFaWJ+Rx8fHG0vqMdrYzyLeIrUq73lUzA+j1ih+bfmV31qkQRxf75s9Qhj
dHUvH0oCLPmmM9FbiW/ZudSuNMP5M4kTDPcLveahpYi3tGbVXbREZ/bwYdnT
6pDcxTgvjNjkYrvB66W4HhdiMXutMBlbtApxqwlM07HD/J4/fKiWc/hkvg79
mvhB+94ohw3YP5s4sfjUzL2O6PPER5JvNp1wQR8i9haWnbjhhvYktnP4OqfI
HfvZEZvNEG/7tA2vD4g1FdXjBrfjevSIpX7NslD2wXw14t9la34Y7sb8ccR1
13zPWO/F/uLEjw8dW+geiPHebj5cdUrr+G8/xn8RH5v97MI5IcZbif2UPy+5
fwjjTcQOnUN/nh/B+Z+JF1SxL7eH4fx/1r0+bfnoKIw3EsuHrhzQiMb4V+I+
1+3XzE5hvJ24YW7YqrVxGO8iLuJcGfY5jfEh4ow/ouuR5zA+hqw/9kX92muJ
GFciDsroFS+4hHFtYrdwxVv1V3D9psRLtxg49KRg/lJiIwtrSfkbmO9CzFHz
yJpy83/7m7jlZaKM612szyCuuv3wQdADdDnxvajXbvEP0e3EIZbjHpXn4/0x
JvvDU0N369dCnGdPbDu0cIJYMfYPJta4e2C7aSXG3xBLnjjDtn2OcUmyP395
3XvqVYv+t3/ztH5MvPQW8y8Sr4/ZWCnzFedHkOdB9Y4U17MN5z8n/vj8vnvJ
dzSbPG9u4+RHHOnCfreJvcOfGQ+P4NL6YfJ8GqTuEm4chbYnz3NnEa/ioSS1
8B6x/6h9W/zHYXwvOQ+Chfqnf6tSszjkPFmQWN+0nEcNYcSj88KMMjQxPkAc
OdBYtk2A/ZrJeRS3J+FvoynGP5DzLNVrhNsrW4wvH82AV0TGLZM1OK+VWC9t
w9BJe+wfKknOx69345Y7Y7xkDHm/uG4rKd6O/XzI+Vu9rkbv4VH0Qnly/u4V
7mNHYr0sOd/t4qYW7z2O9a+J39aEupjEYb4feR98sTGLSb+M63lO3ie9C670
JeZhvhL5vR70MPFQYT7mDxKzjM7IthZivFGDgdHqxzWMynDeQ00GlPr8rQpf
/+/+6DBgnG59uuUX1l8i77d7mos0Zbuw/hZ5/806Y55u2IP5/96PFqHT8wOH
cD3fjcn71YXXKiOlSr1pBgPeE7pmGGqiq8j7tiPiR4GdNjWMmc+An1irdSCD
ccsFZP0/3zs/0cf4s4UMRJQUHbUzw3jLUgZS9p+tC7BD31pDfj83WfgXhFKz
VnuT9SRWXhJEoCV3MpC0bn3FyWPox+T7w7HMZ9KmWGqRqR+5v7eSysUvY78V
QeR9tu8vzzIP8zUjGCgYn1NS1IX5K64zoFFm2aXfi96ZzoAw5LlawgDmx9xk
YG5Pyy4PsYnUTXcYyKlXVhsjRy26mUv2xzU/3yW61PCtkryv5xhyK1zQg91k
no3UoQE3aqFTLwOfnRrbGA+sf9rPgGZwbM4Rb4yfHSbfW8/67GEfxj3HCODK
8oKEOzE4P5H8vk9xWaV0pgjjK8n3c/phv/HuU9VofdtVAbSbbQw+bIAekUa+
37sWdF42pmapppPvcVfFlw0zMW5/h/Sbdydh/UJ0z2Pyfd33S93GCfMfvxHA
me1eetNOUMO+cboQardpqXg3tUh4SBcuLa932NyLvhiqC7lWdt5FA1j/LEIX
OuYsOhEhpk7rVWJ0wUFb97WCHLoxWReMejpctXSpRfJFuvAhITjQ0oVaWC47
BabVX0wNrcD4guQpkMCcTa9YysP9/2YqHBRFJSzNpgbvJfqwjGt3pVRLg84f
5WYA5t5FG8aHUfMMVAwhUdVVq7ybGt6/MgStJ9fibDZM+ueG+gNGED21QPAi
j9pZV8kYtnSOfF4i0KT9QlOMwfV2By/sOHXSDHUT8ApeNbjkBDVPU8ME/FZl
vZY5Re0so2kCR7v9jkXHYf5bbRPImNk3EH+eGtz1TKAvf/jV1etomGMC0S9k
ogqLsL7T3gTOXN7ucaSEWnhngwlc3l05f3EZzvPdaAL3lKL7yyqpRd+cTaB+
vYJHzUtcb5W7Ceg0sud/bsT4Wj8TMMgKVEtuwrj4XhOYdfhd3+av6HR/E7DW
OX+rtQ3XM7TPBHw9eWq/f2P8WLAJBJn915fZidYPMYHDsp9rd3dTN1QeNoGE
m5cjentxvVJhJnBJONI9px+v/2q4CVxfudkiaBD7m0eaQNakZxPn/sX1vY0y
gbxO7b7hYey/67gJ/B8ZAhAe
        "]]},
      Annotation[#, "Charting`Private`Tag$184555#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10.}, {0, 21.972080803241298`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8598169926715813`*^9, 3.859816995999206*^9}, 
   3.8598171136016483`*^9, 3.859817156164751*^9, 3.859817241432835*^9, 
   3.859817426293501*^9, 3.85981749184562*^9, 3.859817730800866*^9, 
   3.859817914781095*^9, 3.8598179518007402`*^9, 3.859818014039393*^9, 
   3.859818098563943*^9, 3.859818174210085*^9, 3.8598182282819033`*^9, 
   3.85981837340204*^9, {3.859818527026355*^9, 3.859818531190098*^9}, 
   3.8598193933629627`*^9, 3.859819611152956*^9, {3.8598205419052773`*^9, 
   3.859820545925742*^9}},
 CellLabel->
  "Out[476]=",ExpressionUUID->"c86a2830-7369-441a-a208-1c1cef801c1e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{970.5, 528.},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"13.0 for Linux x86 (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"5873d279-2d0c-48fa-8bcb-b456f2e01d36"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1442, 31, 236, "Input",ExpressionUUID->"c38ce247-cc6a-4315-9c51-3a4fd0216df1"],
Cell[CellGroupData[{
Cell[2025, 55, 239, 4, 68, "Section",ExpressionUUID->"207b3f9c-2043-4e42-a3b8-0773b50f0b23"],
Cell[CellGroupData[{
Cell[2289, 63, 253, 5, 29, "Input",ExpressionUUID->"5c52ba08-27cd-43a5-aa6b-39b31c0e1a3d"],
Cell[2545, 70, 248, 4, 33, "Output",ExpressionUUID->"89a186f4-48ac-4664-8c1c-85f06c3d23d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2830, 79, 208, 4, 29, "Input",ExpressionUUID->"6c273393-19a6-41ce-af7a-133aeef56a96"],
Cell[3041, 85, 287, 6, 33, "Output",ExpressionUUID->"f35ffc71-855f-4472-916c-23391986b60e"]
}, Open  ]],
Cell[3343, 94, 472, 11, 51, "Input",ExpressionUUID->"7008c68a-3566-46bb-8cfc-d11ce6c3eea9"],
Cell[CellGroupData[{
Cell[3840, 109, 418, 11, 29, "Input",ExpressionUUID->"92ea4dcb-56cf-4abe-ab40-0929503101d5"],
Cell[4261, 122, 25611, 476, 248, "Output",ExpressionUUID->"96b39ad7-0f27-4480-964e-4b34af5d98da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29909, 603, 169, 3, 54, "Subsection",ExpressionUUID->"fc29b5db-4428-47ce-b409-0de5bda03cb0"],
Cell[30081, 608, 625, 16, 36, "Text",ExpressionUUID->"0df6b626-fe8c-4951-8806-b2bc541cf530"],
Cell[CellGroupData[{
Cell[30731, 628, 539, 12, 29, "Input",ExpressionUUID->"c77c0eda-c094-4034-9040-6c81e0fdacab"],
Cell[31273, 642, 51662, 950, 66, "Output",ExpressionUUID->"39ae3fb7-6fb6-430f-9068-877e15899d65"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82972, 1597, 476, 12, 29, "Input",ExpressionUUID->"d03436ec-213f-4cd6-a3f2-76e5404668cd"],
Cell[83451, 1611, 17092, 299, 245, "Output",ExpressionUUID->"d4235d5c-21c8-4487-bd21-ae187f97b6e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100580, 1915, 662, 16, 29, "Input",ExpressionUUID->"68e374fe-ee50-48ff-8f4f-dd35d198f5ce"],
Cell[101245, 1933, 51495, 948, 66, "Output",ExpressionUUID->"a991112e-cb12-4707-aad2-a7e6e6813ce0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152777, 2886, 483, 12, 29, "Input",ExpressionUUID->"161fca30-317b-4c99-afcd-7bf297637455"],
Cell[153263, 2900, 17084, 299, 245, "Output",ExpressionUUID->"1f486a2d-4f38-4550-aad7-5621a75d657a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170384, 3204, 535, 14, 29, "Input",ExpressionUUID->"0a363f40-f242-4f8d-bcce-6fd91d721f7a"],
Cell[170922, 3220, 221, 4, 33, "Output",ExpressionUUID->"3f070ce5-1eff-4a54-8b6d-9943a80b32cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[171204, 3231, 170, 3, 68, "Section",ExpressionUUID->"0a7a2423-5263-43b1-8631-025340deec6b"],
Cell[CellGroupData[{
Cell[171399, 3238, 506, 14, 29, "Input",ExpressionUUID->"663594e8-bad4-410a-a409-c8195c50a9b2"],
Cell[171908, 3254, 20048, 411, 65, "Output",ExpressionUUID->"2de44270-9777-4805-8ba8-517ce1897c5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191993, 3670, 543, 14, 29, "Input",ExpressionUUID->"cc1414c7-7fee-460a-acbc-19c486089b56"],
Cell[192539, 3686, 19458, 397, 65, "Output",ExpressionUUID->"c0c9e34a-bdfd-4f7c-8b07-d6d3706288cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212034, 4088, 485, 12, 29, "Input",ExpressionUUID->"a3c6263a-b733-49e4-bd55-588f9a3dd3fa"],
Cell[212522, 4102, 17027, 298, 245, "Output",ExpressionUUID->"f04943dc-b84b-4077-a005-d23caeafbd7d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229598, 4406, 166, 3, 68, "Section",ExpressionUUID->"befacb98-605f-498f-afd5-373a414ee46c"],
Cell[CellGroupData[{
Cell[229789, 4413, 665, 16, 29, "Input",ExpressionUUID->"f8c89adb-0cf2-455b-9ab6-4f466c167740"],
Cell[230457, 4431, 19513, 398, 65, "Output",ExpressionUUID->"2d2e31cb-a360-4008-a1de-2f5512f316ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250007, 4834, 641, 16, 29, "Input",ExpressionUUID->"bebcc049-4548-49e8-9dcc-7b053c4b0fff"],
Cell[250651, 4852, 19486, 398, 65, "Output",ExpressionUUID->"3398be37-1bc5-4e8c-b72e-a9ba2a79b2c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270174, 5255, 462, 12, 29, "Input",ExpressionUUID->"9b54222f-5b15-4fab-834c-2dc0955c1c26"],
Cell[270639, 5269, 17190, 300, 245, "Output",ExpressionUUID->"75f4bc57-c764-4b88-b108-09be87075a7f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[287878, 5575, 221, 4, 68, "Section",ExpressionUUID->"322d21d3-b9fa-4a8e-a39c-e6d65cbcb382"],
Cell[CellGroupData[{
Cell[288124, 5583, 1053, 22, 29, "Input",ExpressionUUID->"6fd20ec6-8099-4d86-8531-46a2e35dc69a"],
Cell[289180, 5607, 28834, 583, 65, "Output",ExpressionUUID->"2f064cd7-465a-4c62-a02e-34dd406d0404"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318051, 6195, 813, 18, 29, "Input",ExpressionUUID->"447dc72f-f350-428c-bcb3-0cbadd0ebc8c"],
Cell[318867, 6215, 28773, 583, 65, "Output",ExpressionUUID->"591725b3-ebb6-4e2b-9686-d5cd5111d436"]
}, Open  ]],
Cell[CellGroupData[{
Cell[347677, 6803, 513, 13, 29, "Input",ExpressionUUID->"8e1fdc55-71d4-44f2-9300-d667a8c02fa2"],
Cell[348193, 6818, 17367, 303, 245, "Output",ExpressionUUID->"77c9af01-ab1b-46b9-9f54-99147a6a95e7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[365609, 7127, 298, 5, 68, "Section",ExpressionUUID->"97fb96a7-1d4c-4bd5-b313-bdacd0ba5bfd"],
Cell[CellGroupData[{
Cell[365932, 7136, 1068, 21, 29, "Input",ExpressionUUID->"9578c88b-f49c-41c4-8ba1-cee6dfa2fe60"],
Cell[367003, 7159, 20302, 409, 65, "Output",ExpressionUUID->"87fefd60-c8e5-456a-bdda-00c2f6ff7813"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387342, 7573, 889, 19, 29, "Input",ExpressionUUID->"6bdcd9d0-5ada-4235-97a0-baa766a7fb39"],
Cell[388234, 7594, 20218, 409, 65, "Output",ExpressionUUID->"37617c22-699e-4f96-b85a-58ae323ad3b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408489, 8008, 613, 15, 29, "Input",ExpressionUUID->"a30bd1d6-657a-4288-9842-10ea6b814fcc"],
Cell[409105, 8025, 27145, 463, 245, "Output",ExpressionUUID->"c86a2830-7369-441a-a208-1c1cef801c1e"]
}, Open  ]]
}, Open  ]]
}
]
*)

